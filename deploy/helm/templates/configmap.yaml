apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "talend-vault-sidecar-injector.fullname" . }}
  labels:
{{ include "talend-vault-sidecar-injector.labels" . | indent 4 }}
data:
  podlifecyclehooks.yaml: |
    postStart:
      exec:
        command:
          - "sh"
          - "-c"
          - cat <APPSVC_SECRETS_VOL_MOUNTPATH>/* >/dev/null 2>&1
  templateblock.hcl: |
    template {
      destination = "/opt/talend/secrets/<APPSVC_SECRETS_DESTINATION>"
      contents = <<EOH
      <APPSVC_TEMPLATE_CONTENT>
      EOH
      command = "<APPSVC_TEMPLATE_COMMAND_TO_RUN>"
      wait {
        min = "1s"
        max = "2s"
      }
    }
  templatedefault.tmpl: |
    {{`{{ with secret "<APPSVC_VAULT_SECRETS_PATH>" }}{{ range \$k, \$v := .Data }}
    {{ \$k }}={{ \$v }}
    {{ end }}{{ end }}`}}
  proxyconfig.hcl: |
    cache {
      use_auto_auth_token = true
    }

    listener "tcp" {
      address = "127.0.0.1:<APPSVC_PROXY_PORT>"
      tls_disable = true
    }
  sidecarconfig.yaml: |
    {{- if .Values.injectconfig.securityContext }}
    securityContext:
      {{- if .Values.injectconfig.securityContext.fsGroup }}
      fsGroup: {{ .Values.injectconfig.securityContext.fsGroup }}
      {{- end }}
    {{- end }}
    containers:
      # This container is only injected in K8S jobs to monitor app job's container termination and send signal to vault sidecar
      - name: tvsi-job-babysitter
        image: {{ include "talend-vault-sidecar-injector.injectconfig.jobbabysitter.image" .Values }}
        imagePullPolicy: {{ .Values.injectconfig.jobbabysitter.image.pullPolicy }}
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        command:
          - "sh"
          - "-c"
          - |
            jwt_sa_token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
            pod_ns=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
            retCode=$(curl -s -X GET -H "Authorization: Bearer $jwt_sa_token" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/$pod_ns/pods/$POD_NAME?pretty=false | jq .code)
            if [ $retCode = "403" ]; then
              curl -s -X GET -H "Authorization: Bearer $jwt_sa_token" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/$pod_ns/pods/$POD_NAME?pretty=false | jq .message
              exit 1
            fi

            while true; do
              cntStatus=$(curl -s -X GET -H "Authorization: Bearer $jwt_sa_token" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/$pod_ns/pods/$POD_NAME?pretty=false | jq -c --raw-output '.status.containerStatuses[] | select(.name == "<APP_JOB_CNT_NAME>").state | keys[0]')
              if [ $cntStatus = "terminated" ]; then
                echo "=> job container terminated: send signal"
                touch /home/vault/vault-sidecars-signal-terminate
                exit 0
              fi
              sleep 2
            done
        volumeMounts:
          - name: vault-token
            mountPath: /home/vault
            # The name's value will be overridden by the webhook
          - name: K8S_SA_SECRETS_VOL_NAME
            mountPath: /var/run/secrets/kubernetes.io/serviceaccount
            readOnly: true
        {{- if .Values.injectconfig.jobbabysitter.resources }}
        resources:
{{ toYaml .Values.injectconfig.jobbabysitter.resources | indent 10 }}
        {{- end }}
      - name: tvsi-vault-agent
        image: {{ include "talend-vault-sidecar-injector.injectconfig.vault.image" .Values }}
        imagePullPolicy: {{ .Values.injectconfig.vault.image.pullPolicy }}
        env:
          - name: SKIP_SETCAP
            value: "true"
          - name: VAULT_ADDR
            value: {{ .Values.vault.addr }}
        command:
          - "sh"
          - "-c"
          - |
            vault_auth_method="<APPSVC_VAULT_AUTH_METHOD>"
            if [ $vault_auth_method = "kubernetes" ]; then
              cat <<EOF > vault-agent-config.hcl
            pid_file = "/home/vault/pidfile"

            auto_auth {
              method "kubernetes" {
                mount_path = "auth/{{ .Values.vault.authMethods.kubernetes.path }}"
                config = {
                  role = "<APP_VAULT_ROLE>"
                  token_path = "/var/run/secrets/talend/vault-sidecar-injector/serviceaccount/token"
                }
              }

              sink "file" {
                config = {
                  path = "/home/vault/.vault-token"
                }
              }
            }

            <APPSVC_PROXY_CONFIG>

            <APPSVC_TEMPLATES>
            EOF
            elif [ $vault_auth_method = "approle" ]; then
              cat <<EOF > vault-agent-config.hcl
            pid_file = "/home/vault/pidfile"

            auto_auth {
              method "approle" {
                mount_path = "auth/{{ .Values.vault.authMethods.approle.path }}"
                config = {
                  role_id_file_path = "/opt/talend/secrets/{{ .Values.vault.authMethods.approle.roleid_filename }}"
                  secret_id_file_path = "/opt/talend/secrets/{{ .Values.vault.authMethods.approle.secretid_filename }}"
                }
              }

              sink "file" {
                config = {
                  path = "/home/vault/.vault-token"
                }
              }
            }

            <APPSVC_PROXY_CONFIG>

            <APPSVC_TEMPLATES>
            EOF
            else
              echo "Unsupported Vault Auth Method: $vault_auth_method"
              exit 1
            fi
            workload_is_job="<APP_JOB>"
            if [ $workload_is_job = "true" ]; then
              docker-entrypoint.sh agent -config=vault-agent-config.hcl {{ include "talend-vault-sidecar-injector.vault.cert.skip.verify" .Values }} -log-level={{- .Values.injectconfig.vault.loglevel }} &
              while true; do
                if [ -f "/home/vault/vault-sidecars-signal-terminate" ]; then
                  echo "=> exit (signal received)"
                  export VAULT_TOKEN=$(cat /home/vault/.vault-token);
                  vault token revoke {{ include "talend-vault-sidecar-injector.vault.cert.skip.verify" .Values }} -self;
                  exit 0
                fi
                sleep 2
              done
            else
              docker-entrypoint.sh agent -config=vault-agent-config.hcl {{ include "talend-vault-sidecar-injector.vault.cert.skip.verify" .Values }} -log-level={{- .Values.injectconfig.vault.loglevel }}
            fi
        lifecycle:
          preStop:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  export VAULT_TOKEN=$(cat /home/vault/.vault-token);
                  vault token revoke {{ include "talend-vault-sidecar-injector.vault.cert.skip.verify" .Values }} -self;
        volumeMounts:
            # Mount path where Vault token retrieved by Vault Agent is stored
          - name: vault-token
            mountPath: /home/vault
            # Mount path used to share secrets. The associated volume is expected to be defined in application's manifest but in case it is not,
            # a default 'secrets' volume will be injected in the requesting pod (see definition below) so that mutation process does not fail.
          - name: secrets
            mountPath: /opt/talend/secrets
            # The name's value will be overridden by the webhook to point to container's service account volume to use for Vault authentication.
          - name: TVSI_SA_SECRETS_VOL_NAME
            mountPath: /var/run/secrets/talend/vault-sidecar-injector/serviceaccount
            readOnly: true
        {{- if .Values.injectconfig.vault.resources }}
        resources:
{{ toYaml .Values.injectconfig.vault.resources | indent 10 }}
        {{- end }}
    volumes:
      - name: vault-token
        emptyDir:
          medium: Memory
      # Note: if 'secrets' volume is defined in pod's manifest then it will be considered instead of the default definition below
      - name: secrets
          emptyDir:
            medium: Memory
