apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "talend-vault-sidecar-injector.fullname" . }}
  labels:
{{ include "talend-vault-sidecar-injector.labels" . | indent 4 }}
data:
  podlifecyclehooks.yaml: |
    postStart:
      exec:
        command:
          - "sh"
          - "-c"
          - cat <APPSVC_SECRETS_VOL_MOUNTPATH>/* >/dev/null 2>&1
  consultemplatetmplblock.hcl: |
    template {
      destination = "/opt/talend/secrets/<APPSVC_SECRETS_DESTINATION>"
      contents = <<EOH
      <APPSVC_TEMPLATE_CONTENT>
      EOH
      command = "<APPSVC_TEMPLATE_COMMAND_TO_RUN>"
      wait {
        min = "1s"
        max = "2s"
      }
    }
  consultemplatetmpldefault.ctmpl: |
    {{`{{ with secret "<APPSVC_VAULT_SECRETS_PATH>" }}{{ range \$k, \$v := .Data }}
    {{ \$k }}={{ \$v }}
    {{ end }}{{ end }}`}}
  sidecarconfig.yaml: |
    {{- if .Values.injectconfig.securityContext }}
    securityContext:
      {{- if .Values.injectconfig.securityContext.fsGroup }}
      fsGroup: {{ .Values.injectconfig.securityContext.fsGroup }}
      {{- end }}
    {{- end }}
    containers:
      # This container is only injected in K8S jobs to monitor app job's container termination and send signal to vault and consul template sidecars
      - name: tvsi-job-babysitter
        image: {{ include "talend-vault-sidecar-injector.injectconfig.jobbabysitter.image" .Values }}
        imagePullPolicy: {{ .Values.injectconfig.jobbabysitter.image.pullPolicy }}
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        command:
          - "sh"
          - "-c"
          - |
            jwt_sa_token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
            pod_ns=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
            podDesc=$(curl -s -X GET -H "Authorization: Bearer $jwt_sa_token" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/$pod_ns/pods/$POD_NAME?pretty=false)
            retCode=$(echo $podDesc | jq .code)
            if [ $retCode = "403" ]; then
              echo $podDesc | jq .message
              exit 1
            fi

            while true; do
              cntStatus=$(curl -s -X GET -H "Authorization: Bearer $jwt_sa_token" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/$pod_ns/pods/$POD_NAME?pretty=false | jq -c --raw-output '.status.containerStatuses[] | select(.name == "<APP_JOB_CNT_NAME>").state | keys[0]')
              if [ $cntStatus = "terminated" ]; then
                echo "=> job container terminated: send signal"
                touch /home/vault/vault-sidecars-signal-terminate
                exit 0
              fi
              sleep 2
            done
        volumeMounts:
          - name: vault-token
            mountPath: /home/vault
            # The name's value will be overridden by the webhook
          - name: K8S_SA_SECRETS_VOL_NAME
            mountPath: /var/run/secrets/kubernetes.io/serviceaccount
            readOnly: true
        {{- if .Values.injectconfig.jobbabysitter.resources }}
        resources:
{{ toYaml .Values.injectconfig.jobbabysitter.resources | indent 10 }}
        {{- end }}
      - name: tvsi-vault-agent
        image: {{ include "talend-vault-sidecar-injector.injectconfig.vault.image" .Values }}
        imagePullPolicy: {{ .Values.injectconfig.vault.image.pullPolicy }}
        env:
          - name: SKIP_SETCAP
            value: "true"
          - name: VAULT_ADDR
            value: {{ .Values.vault.addr }}
        command:
          - "sh"
          - "-c"
          - |
            cat <<EOF > vault-agent-config.hcl
            pid_file = "/home/vault/pidfile"

            auto_auth {
              method "kubernetes" {
                mount_path = "auth/{{ .Values.vault.authMethods.kubernetes.path }}"
                config = {
                  role = "<APP_VAULT_ROLE>"
                  token_path = "/var/run/secrets/talend/vault-sidecar-injector/serviceaccount/token"
                }
              }

              sink "file" {
                config = {
                  path = "/home/vault/.vault-token"
                }
              }
            }
            EOF
            workload_is_job="<APP_JOB>"
            if [ $workload_is_job = "true" ]; then
              docker-entrypoint.sh agent -config=vault-agent-config.hcl {{ include "talend-vault-sidecar-injector.vault.cert.skip.verify" .Values }} -log-level={{- .Values.injectconfig.vault.loglevel }} &
              while true; do
                if [ -f "/home/vault/vault-sidecars-signal-terminate" ]; then
                  echo "=> exit (signal received)"
                  export VAULT_TOKEN=$(cat /home/vault/.vault-token);
                  vault token revoke {{ include "talend-vault-sidecar-injector.vault.cert.skip.verify" .Values }} -self;
                  exit 0
                fi
                sleep 2
              done
            else
              docker-entrypoint.sh agent -config=vault-agent-config.hcl {{ include "talend-vault-sidecar-injector.vault.cert.skip.verify" .Values }} -log-level={{- .Values.injectconfig.vault.loglevel }}
            fi
        lifecycle:
          preStop:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  export VAULT_TOKEN=$(cat /home/vault/.vault-token);
                  vault token revoke {{ include "talend-vault-sidecar-injector.vault.cert.skip.verify" .Values }} -self;
        volumeMounts:
          - name: vault-token
            mountPath: /home/vault
            # The name's value will be overridden by the webhook to point to container's service account volume to use for Vault authentication.
          - name: TVSI_SA_SECRETS_VOL_NAME
            mountPath: /var/run/secrets/talend/vault-sidecar-injector/serviceaccount
            readOnly: true
        {{- if .Values.injectconfig.vault.resources }}
        resources:
{{ toYaml .Values.injectconfig.vault.resources | indent 10 }}
        {{- end }}
      - name: tvsi-consul-template
        image: {{ include "talend-vault-sidecar-injector.injectconfig.consultemplate.image" .Values }}
        imagePullPolicy: {{ .Values.injectconfig.consultemplate.image.pullPolicy }}
        env:
          - name: VAULT_ADDR
            value: {{ .Values.vault.addr }}
        command:
          - "sh"
          - "-c"
          - |
            cat <<EOF > /consul-template/config/consul-template-config.hcl
            vault {
              vault_agent_token_file = "/home/vault/.vault-token"
              renew_token = false
              retry {
                attempts = 0
                backoff = "500ms"
                max_backoff = "2s"
              }
              ssl {
                enabled = {{ .Values.vault.ssl.enabled }}
                verify = {{ .Values.vault.ssl.verify }}
              }
            }

            <APPSVC_TEMPLATES>
            EOF
            workload_is_job="<APP_JOB>"
            if [ $workload_is_job = "true" ]; then
              docker-entrypoint.sh -config=/consul-template/config/consul-template-config.hcl -log-level={{- .Values.injectconfig.consultemplate.loglevel }} &
              while true; do
                if [ -f "/home/vault/vault-sidecars-signal-terminate" ]; then
                  echo "=> exit (signal received)"
                  exit 0
                fi
                sleep 2
              done
            else
              docker-entrypoint.sh -config=/consul-template/config/consul-template-config.hcl -log-level={{- .Values.injectconfig.consultemplate.loglevel }}
            fi
        volumeMounts:
          - name: vault-token
            mountPath: /home/vault
            # This volume must be defined in application's manifest (used to share the secrets file(s))
          - name: secrets
            mountPath: /opt/talend/secrets
        {{- if .Values.injectconfig.consultemplate.resources }}
        resources:
{{ toYaml .Values.injectconfig.consultemplate.resources | indent 10 }}
        {{- end }}
    volumes:
      - name: vault-token
        emptyDir:
          medium: Memory
