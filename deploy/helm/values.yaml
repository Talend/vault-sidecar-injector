## Default values for talend-vault-sidecar-injector
## This is a YAML-formatted file
## Declare variables to be passed into your templates

## ------------------------------------------------------------------------------------------------------ ##
## defines custom values
## ------------------------------------------------------------------------------------------------------ ##

replicaCount: 3  # replicaCount defines the number of container replicas running in parallel
revisionHistoryLimit: 3  # revision history limit in tiller / helm / k8s

# ----------------------------------------------------------------------------
# Define image properties
# ----------------------------------------------------------------------------

image:
  path: "talend/vault-sidecar-injector"  # VSI image path
  tag: "latest"  # VSI image tag
  pullPolicy: IfNotPresent  # Pull policy for images: IfNotPresent or Always
  port: 8443  # service main port exposed by the image
  metricsPort: 9000  # metricsPort defines the port exposed by the image for metrics collection

  applicationNameLabel: talend-vault-sidecar-injector  # applicationNameLabel represents the Talend Application Name and it must match the label com.talend.application from the docker image
  serviceNameLabel: talend-vault-sidecar-injector  # serviceNameLabel represents the Talend Service Name and it must match the label com.talend.service from the docker image

# ----------------------------------------------------------------------------
# Define service properties
# ----------------------------------------------------------------------------

service:
  name: talend-vault-sidecar-injector  # service name
  prefixWithHelmRelease: false  # prefixWithHelmRelease defines whether the service name will be prefixed with Helm release name
  exposedServicePort: 443  # exposedServicePort is the port exposed by the K8s service (Kubernetes always assumes port 443 for webhooks)
  type: ClusterIP  # type is the Kubernetes service type: ClusterIP, NodePort, LoadBalancer, ExternalName

# ----------------------------------------------------------------------------
# Define mutating webhook config properties
# ----------------------------------------------------------------------------

mutatingwebhook:
  cert:
    certlifetime: 5 # default lifetime in years for generated certificates. Not used if secretName is non-null.
    secretName: ~ # name of the k8s secret that contains the webhook certificate and private key. If null, they are generated. Secret should be in webhook's namespace.
    caBundle: "" # base64-encoded PEM-encoded certificate for the CA that signed the webhook certificate. To set if secretName is non-null.
    certfile: cert.pem # default filename for webhook certificate in provided k8s secret
    keyfile: key.pem # default filename for webhook private key in provided k8s secret
  annotations:
    keyPrefix: sidecar.vault.talend.org  # prefix used for all vault sidecar injector annotations
    appLabelKey: com.talend.application  # annotation for application's name. Annotation's value used as Vault role by default.
    appServiceLabelKey: com.talend.service  # annotation for service's name
  failurePolicy: Ignore # defines how unrecognized errors and timeout errors from the admission webhook are handled. Allowed values are Ignore or Fail 
  namespaceSelector: # Enable none or only one of the options below
    boolean: false  # Enable to control, with label "vault-injection=enabled", the namespaces where injection is allowed (if false: all namespaces except _kube-system_ and _kube-public_) 
    namespaced: false # Enable to control, with label "vault-injection={{ .Release.Namespace }}", the specific namespace where injection is allowed (ie, restrict to namespace where injector is installed)

# ----------------------------------------------------------------------------
# Define injection config properties
# ----------------------------------------------------------------------------
injectconfig:
  jobbabysitter:
    image:
      path: "everpeace/curl-jq" # image path
      tag: "latest" # image tag
      pullPolicy: Always # Pull policy for images: IfNotPresent or Always
    resources:
      limits:
        cpu: 20m  # Job babysitter sidecar CPU resource limits
        memory: 25Mi  # Job babysitter sidecar memory resource limits
      requests:
        cpu: 15m  # Job babysitter sidecar CPU resource requests
        memory: 20Mi  # Job babysitter sidecar memory resource requests
  vault:
    image:
      path: "vault" # image path
      tag: "1.4.2" # image tag
      pullPolicy: Always # Pull policy for images: IfNotPresent or Always
    loglevel: info # Vault log level: trace, debug, info, warn, err
    resources:
      limits:
        cpu: 50m  # Vault sidecar CPU resource limits
        memory: 50Mi  # Vault sidecar memory resource limits
      requests:
        cpu: 40m  # Vault sidecar CPU resource requests
        memory: 35Mi  # Vault sidecar memory resource requests

# ----------------------------------------------------------------------------
# Define Helm Hook properties
# ----------------------------------------------------------------------------

hook:
  image:
    path: "bitnami/kubectl"  # image path
    tag: "latest" # image tag
    pullPolicy: Always  # Pull policy for images: IfNotPresent or Always

# ----------------------------------------------------------------------------
# Define resources requests and limits
# ----------------------------------------------------------------------------

resources:
  limits:
    cpu: 250m  # CPU resource limits
    memory: 256Mi  # Memory resource limits
  requests:
    cpu: 100m  # CPU resource requests
    memory: 128Mi  # Memory resource requests

# ----------------------------------------------------------------------------
# Define liveness & readiness probes
# ----------------------------------------------------------------------------

probes:
  ## Liveness probe when failed trigger a pod restart.
  ## Several parameters can be changed to achieve the desired effect.
  ## After an initial delay, the probe will check at every defined period,
  ## wait for a response until the timeout and expect a certain number
  ## of succuessful or failed checks to change the liveness status.
  ## SuccessThreshold is not customizable and is always 1
  ## In this case, the pod will restart after 60s if not alive (30s+3*10s)
  liveness:
    initialDelaySeconds: 2  #  Number of seconds after the container has started before the probe is initiated
    periodSeconds: 20  #  How often (in seconds) to perform the probe
    timeoutSeconds: 5  #  Number of seconds after which the probe times out
    failureThreshold: 3  #  Number of probe failure before restarting the probe
  ## Readiness probe when successful allow trafic to be sent to the pod.
  ## Several parameters can be changed to achieve the desired effect.
  ## After an initial delay, the probe will check at every defined period,
  ## wait for a response until the timeout and expect a certain number
  ## of succuessful or failed checks to change the readiness status.
  readiness:
    initialDelaySeconds: 2  #  Number of seconds after the container has started before the probe is initiated
    periodSeconds: 20  #  How often (in seconds) to perform the probe
    timeoutSeconds: 5  #  Number of seconds after which the probe times out
    successThreshold: 1  #  Minimum consecutive successes for the probe to be considered successful after having failed
    failureThreshold: 3  #  Number of probe failure before setting the probe to Unready

# ----------------------------------------------------------------------------
# Define Vault Server config
# ----------------------------------------------------------------------------

vault:
  addr: ~  # Address of Vault server
  authMethods:
    kubernetes:
      path: kubernetes # Path defined for Kubernetes Auth Method
    approle:
      path: approle # Path defined for AppRole Auth Method
      roleid_filename: approle_roleid # Filename for role id
      secretid_filename: approle_secretid # Filename for secret id
  ssl:
    verify: true  # Enable or disable verification of certificates
