containers:
- command:
  - sh
  - -c
  - |
    jwt_sa_token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    pod_ns=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    retCode=$(curl -s -X GET -H "Authorization: Bearer $jwt_sa_token" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/$pod_ns/pods/$POD_NAME?pretty=false | jq .code)
    if [ $retCode = "403" ]; then
      curl -s -X GET -H "Authorization: Bearer $jwt_sa_token" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/$pod_ns/pods/$POD_NAME?pretty=false | jq .message
      exit 1
    fi

    while true; do
      cntStatus=$(curl -s -X GET -H "Authorization: Bearer $jwt_sa_token" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://$KUBERNETES_SERVICE_HOST/api/v1/namespaces/$pod_ns/pods/$POD_NAME?pretty=false | jq -c --raw-output '.status.containerStatuses[] | select(.name == "<APP_JOB_CNT_NAME>").state | keys[0]')
      if [ $cntStatus = "terminated" ]; then
        echo "=> job container terminated: send signal"
        touch /opt/talend/tvsi/vault-sidecars-signal-terminate
        exit 0
      fi
      sleep 2
    done
  env:
  - name: POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  image: everpeace/curl-jq
  imagePullPolicy: IfNotPresent
  name: tvsi-job-babysitter
  resources: {}
  volumeMounts:
  - mountPath: /opt/talend/tvsi
    name: tvsi-shared
  - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
    name: K8S_SA_SECRETS_VOL_NAME
    readOnly: true
- command:
  - sh
  - -c
  - |
    cat <<EOF > vault-agent-config.hcl
    pid_file = "/home/vault/pidfile"

    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config = {
          role = "<APP_VAULT_ROLE>"
          token_path = "/var/run/secrets/talend/vault-sidecar-injector/serviceaccount/token"
        }
      }

      sink "file" {
        config = {
          path = "/home/vault/.vault-token"
        }
      }
    }

    <APPSVC_PROXY_CONFIG>

    <APPSVC_TEMPLATES>
    EOF
    workload_is_job="<APP_JOB>"
    if [ $workload_is_job = "true" ]; then
      docker-entrypoint.sh agent -config=vault-agent-config.hcl -log-level=info &
      while true; do
        if [ -f "/opt/talend/tvsi/vault-sidecars-signal-terminate" ]; then
          echo "=> exit (signal received)"
          export VAULT_TOKEN=$(cat /home/vault/.vault-token);
          vault token revoke -self;
          exit 0
        fi
        sleep 2
      done
    else
      docker-entrypoint.sh agent -config=vault-agent-config.hcl -log-level=info
    fi
  env:
  - name: SKIP_SETCAP
    value: "true"
  - name: VAULT_ADDR
    value: https://vault:8200
  image: vault:1.3.1
  imagePullPolicy: IfNotPresent
  lifecycle:
    preStop:
      exec:
        command:
        - sh
        - -c
        - |
          export VAULT_TOKEN=$(cat /home/vault/.vault-token); vault token revoke -self;
  name: tvsi-vault-agent
  resources: {}
  volumeMounts:
  - mountPath: /opt/talend/tvsi
    name: tvsi-shared
  - mountPath: /opt/talend/secrets
    name: secrets
  - mountPath: /var/run/secrets/talend/vault-sidecar-injector/serviceaccount
    name: TVSI_SA_SECRETS_VOL_NAME
    readOnly: true
initContainers: null
volumes:
- emptyDir:
    medium: Memory
  name: tvsi-shared
- emptyDir:
    medium: Memory
  name: secrets
